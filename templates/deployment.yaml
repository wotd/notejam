parameters:
    stage: ''
    database_port: ''
    app_language: 'django'
    docker_repo: 'wotd/notejam'
    replicas: 1
    database_name: ''
    database_host: ''


steps:
- script: |
    export DATABASE_NAME=${{ parameters.database_name }}
    export DATABASE_HOST=${{ parameters.database_host }}
    export REPLICAS=${{ parameters.replicas }}
    export STAGE=${{ parameters.stage }}
    export APP_NAME=${{ parameters.app_language }}-notejam
    export NAMESPACE=${STAGE}-${APP_NAME}
    export CONTAINER_IMAGE=$(docker_repo):${{ parameters.app_language }}-$(Build.BuildId)
    export CONTAINER_PORT=8000
    export APP_LANGUAGE=${{ parameters.app_language }}
    export DATABASE_PORT=${{ parameters.database_port }}
    envsubst < deployments/${{ parameters.stage }}_deployment_template.yml > deployments/${{ parameters.stage }}_${{ parameters.app_language }}.yml
    kubectl apply -f deployments/${{ parameters.stage }}_${{ parameters.app_language }}.yml
- publish: deployments/${{ parameters.stage }}_${{ parameters.app_language }}.yml
  artifact: ${{ parameters.stage }}Deployment
- script: |
    # Check if all pods are in Running state
    while [ "$k" != "1" ]; do sleep 2 ; k=$(kubectl get pods -n ${{ parameters.stage }}-${{ parameters.app_language }}-notejam | grep -v Running | wc -l) ; echo "Waiting... $k"; done
    sleep 5
    # do DB operations
    pod=$(kubectl get pods -n ${{ parameters.stage }}-${{ parameters.app_language }}-notejam | grep notejam | head -n 1 | awk '{print $1}')
    kubectl exec ${pod} -n ${{ parameters.stage }}-${{ parameters.app_language }}-notejam -- ./manage.py syncdb --noinput
    kubectl exec ${pod} -n ${{ parameters.stage }}-${{ parameters.app_language }}-notejam -- ./manage.py migrate 